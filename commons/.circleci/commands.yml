commands:
###############################
####### SHARED COMMANDS #######
###############################
  tag_commit:
    parameters:
      directory:
        default: ""
        type: string
    steps:
      - run : bash commons/scripts/auto_tag.sh <<parameters.directory>>
  upload_artifacts:
    parameters: 
      from:
        type: string
        description: A local *directory* path to sync with S3
      to:
        type: string
        description: A URI to an S3 bucket, i.e. 's3://the-name-my-bucket'
    steps:
      - aws-s3/sync:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to:   <<parameters.to>>
  create_versioned_assets:
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - run: 
          name: Save Version
          command: |
                mkdir -p tmp_workspace
                echo "export GIT_TAG=\"${GIT_TAG}\"" >> tmp_workspace/env_vars
      - aws-s3/copy:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to  : <<parameters.to>>
  docker_push:
    parameters:
      appName:
        default: ""
        type: string
      ecrRepo:
        default: ""
        type: string
    steps:
      - run:
          name: Docker Push
          command: |
            docker tag <<parameters.appName>>:latest <<parameters.ecrRepo>>/<<parameters.appName>>:latest
            docker push <<parameters.ecrRepo>>/<<parameters.appName>>:latest
            docker tag <<parameters.appName>>:latest <<parameters.ecrRepo>>/<<parameters.appName>>:${GIT_TAG}
            docker push <<parameters.ecrRepo>>/<<parameters.appName>>:${GIT_TAG}
#######################################
##### PYTHON APP LINTER & TESTER ######
#######################################
  py_linters:
    parameters:
      directory:
        default: ""
        type: string
    steps:
        - run:
            name: Linters
            command: |
                cd apps/<<parameters.directory>>
                poetry run flake8
  py_tests:
    parameters:
      directory:
        default: ""
        type: string
    steps:
        - run:
            name: Pytests
            command: |
                cd apps/<<parameters.directory>>/tests
                poetry run pytest -v
#######################################
##### PYTHON APP DEPLOY COMMANDS ######
#######################################
  poetry_build:
    parameters:
      directory:
        default: ""
        type: string
    steps:
      - run: 
          name: Poetry Build
          command: |
                cd apps/<<parameters.directory>>
                echo Building the code in `pwd` with: `python -V` `pip -V` and `poetry -V`
                poetry export --with layer -f requirements.txt --output requirements.txt --without-hashes
                poetry build
                poetry run pip install -r requirements.txt --upgrade --only-binary :all: --platform manylinux2010_x86_64 --target package dist/*.whl
  py_create_package:
    parameters:
      directory:
        default: ""
        type: string
    steps:
      - run:
          name: Create Package
          command: |
              cd apps/<<parameters.directory>>/package
              echo Zipping the code in `pwd`
              mkdir -p out
              zip -r out/latest.zip . -x '*.pyc'
################################
#### PYTHON CONTAINER BUILD ####
################################
  poetry_container_build:
    parameters:
      directory:
        default: ""
        type: string
    steps:
      - run: 
          name: Poetry Container Build
          command: |
                cd apps/<<parameters.directory>>
                echo Building the code in `pwd` with: `python -V` `pip -V` and `poetry -V`
                poetry export --only main,layer,docker -f requirements.txt --output requirements.txt --without-hashes -vvv
  py_docker_build:
    parameters:
      directory:
        default: ""
        type: string
      appName:
        default: ""
        type: string
      otelLayerArn:
        default: ""
        type: string
      ecrRepo:
        default: ""
        type: string
    steps:
      - run:
          name: Python Docker Build
          command: |
            cd apps/<<parameters.directory>>
            echo Building docker image for <<parameters.appName>>
            aws ecr get-login-password --profile cicd --region us-west-2 | docker login --username AWS --password-stdin <<parameters.ecrRepo>>
            docker build --platform linux/amd64 -t <<parameters.appName>>:latest --build-arg PYTHON_VERSION=3.8 --build-arg HANDLER=<<parameters.directory>>.handler.handler .
#           docker build --platform linux/amd64 -t <<parameters.appName>>:latest --build-arg PYTHON_VERSION=3.8 --build-arg OTEL_LAYER_ARN=<<parameters.otelLayerArn>> --build-arg HANDLER=<<parameters.directory>>.handler .
################################
##### APP STARTER COMMANDS #####
################################
  start_lambda:
    parameters:
      target-env:
        type: string
      appName:
        type: string
      directory:
        type: string
    steps:
      - run:
          name: Intiating Lambda
          command: |
            source tmp_workspace/env_vars
            FARN=$(aws lambda update-function-code --function-name techno-core-<<parameters.target-env>>-<<parameters.appName>> --region ${AWS_REGION} --s3-bucket iq-artifacts-cicd-uswest2 --s3-key <<parameters.target-env>>/<<parameters.directory>>/latest.zip | jq -r .FunctionArn)
            date=$( date +'%m/%d/%Y %H:%M:%S:%3N')
            aws lambda tag-resource --resource $FARN --tags version=${GIT_TAG},time="$date" --region ${AWS_REGION} 
####################################
#### RUBY APP TESTER AND LINTER ####
####################################
  ruby_install_packages:
    parameters:
      directory:
        default: ""
        type: string
    steps:
        - run:
            name: Install Ruby Package
            command: |
                cd apps/<<parameters.directory>>
                gem install bundler -v 2.2.32
  ruby_linters:
    parameters:
      directory:
        default: ""
        type: string
    steps:
        - run:
            name: Linters
            command: |
                cd apps/<<parameters.directory>>
                bundle exec rubocop           
  ruby_tests:
    parameters:
      directory:
        default: ""
        type: string
    steps:
        - run:
            name: Pytests
            command: |
                cd apps/<<parameters.directory>>
                bundle exec rspec
###########################
##### RUBY APP DEPLOY #####
###########################   
  bundle_build:
    parameters:
      directory:
        default: ""
        type: string
    steps:
      - run: 
          name: Bundle Build
          command: |
                cd apps/<<parameters.directory>>
                echo Building the code in `pwd` with: `ruby -v` and `bundler -v`
                bundle config set --local deployment 'true'
                bundle install
  ruby_create_package:
    parameters:
      directory:
        default: ""
        type: string
    steps:
      - run:
          name: Create Package
          command: |
              cd apps/<<parameters.directory>>
              echo Zipping the code in `pwd`
              apt-get update && apt-get install -y zip
              mkdir -p out
              zip -r out/input_file_validator.zip .  
########################################
##### ARTIFACT PROMOTION COMMANDS ######
########################################
  artifact_promotion:
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - aws-s3/copy:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to  : <<parameters.to>> 
  version_update:
    parameters:
      version:
        default: ""
        type: string
      target-env:
        default: ""
        type: string
    steps:
      - run:
          name: Version Update
          command: bash commons/scripts/version_update.sh <<parameters.version>> <<parameters.target-env>>
                
###########################
######## SECURITY #########
###########################
  snyk_sca:
    parameters:
      directory:
        default: ""
        type: string
      snyk_token:
        default: ""
        type: string
    steps: 
      - run:
          name: "Snyk test"
          command: |
            n=0
            until [ "$n" -ge 5 ]
            do
                curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
                chmod +x snyk
                sudo mv ./snyk /usr/local/bin/
                snyk auth <<parameters.snyk_token>>
                cd apps/<<parameters.directory>>
                snyk test --command=python3 --fail-on=all || true
                break
                echo -e "\nCurl command failed. Retrying again...\n"
                n=$((n+1)) 
                sleep 1
            done
  snyk_sast:
    parameters:
      directory:
        default: ""
        type: string
      snyk_token:
        default: ""
        type: string
    steps: 
      - run:
          name: "Snyk code test"
          command: |
            n=0
            until [ "$n" -ge 5 ]
            do
                curl https://static.snyk.io/cli/latest/snyk-linux -o snyk
                chmod +x snyk
                sudo mv ./snyk /usr/local/bin/
                snyk auth <<parameters.snyk_token>>
                cd apps/<<parameters.directory>>
                snyk code test || true
                break
                echo -e "\nCurl command failed. Retrying again...\n"
                n=$((n+1)) 
                sleep 1
            done
################################
###### TERRAFORM TEST ##########
################################
  debug_mode_on:
    steps:
      - run:
          name: Create Package
          command: |
              export TF_LOG="TRACE" >> $BASH_ENV
###############################
###### TERRAFORM DEPLOY #######
###############################

################################
###### Push Notifications ######
################################
  start_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*** Starting Deployment for Techno-core ***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  completed_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*** Deployment for Techno-core Completed ***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          mentions: '@dow-platform'
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          mentions: '@dow-platform'
          template: basic_success_1
#############################
###### Gather metrics #######
#############################