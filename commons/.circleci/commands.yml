commands:
################################
##### APP DEPLOY COMMANDS ######
################################
  tag_commit:
    parameters:
      appName:
        default: ""
        type: string
    steps:
      - run : bash commons/scripts/auto_tag.sh <<parameters.appName>>

  poetry_build:
    parameters:
      appName:
        default: ""
        type: string
    steps:
      - run: 
          name: Poetry Build
          command: |
                cd apps/<<parameters.appName>>
                echo Building the code in `pwd` with: `python -V` `pip -V` and `poetry -V`
                poetry build
                poetry run pip install --upgrade -t package dist/*.whl
  create_package:
    parameters:
      appName:
        default: ""
        type: string
    steps:
      - run:
          name: Create Package
          command: |
              cd apps/<<parameters.appName>>/package
              echo Zipping the code in `pwd`
              mkdir -p out
              zip -r out/latest.zip . -x '*.pyc'
  upload_artifacts:
    parameters: 
      from:
        type: string
        description: A local *directory* path to sync with S3
      to:
        type: string
        description: A URI to an S3 bucket, i.e. 's3://the-name-my-bucket'
    steps:
      - aws-s3/sync:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to:   <<parameters.to>>
  create_versioned_assets:
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - aws-s3/copy:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to  : <<parameters.to>>

########################################
##### ARTIFACT PROMOTION COMMANDS ######
########################################

  artifact_promotion:
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - aws-s3/copy:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to  : <<parameters.to>>

################################
##### APP Starter COMMANDS #####
################################
  start_lambda:
    parameters:
      target-env:
        type: string
      appName:
        type: string
      directory:
        type: string
    steps:
      - run:
          name: Intiating Lambda
          command: |
            aws lambda update-function-code --function-name techno-core-<<parameters.target-env>>-<<parameters.appName>> --region ${AWS_REGION} --s3-bucket iq-artifacts-cicd-uswest2 --s3-key <<parameters.target-env>>/<<parameters.directory>>/latest.zip

################################
##### APP LINTER & TESTER ######
################################
  check_pwd:
    parameters:
      appName:
        default: ""
        type: string
    steps:
        - run:
            name: pwd
            command: |
                  pwd
                  ls
                  cd apps/<<parameters.appName>>
                  ls
                  poetry install --no-ansi


  linting_and_metrics:
    parameters:
      appName:
        default: ""
        type: string
    steps:
        - run:
            name: Linters
            command: |
                pwd
                cd apps/<<parameters.appName>>
                poetry run flake8
  py_tests:
    parameters:
      appName:
        default: ""
        type: string
    steps:
        - run:
            name: Pytests
            command: |
                pwd
                cd apps/<<parameters.appName>>/tests
                poetry run pytest -v
            
################################
###### TERRAFORM TEST ##########
################################
  check_tf:
    steps:
      - run:
          name: Create Package
          command: |
              pwd
              ls
              cd infrastructure/api_handler/sand/dshah
              ls


###############################
###### TERRAFORM DEPLOY #######
###############################
  check_tf:
    steps:
      - run:
          name: Create Package
          command: |
              pwd
              ls
              cd infrastructure/api_handler/sand/dshah
              ls

###############################
###### Security #######
###############################
  change_dir:
    parameters:
      appName:
        default: ""
        type: string
    steps: 
      - run:
          name: "Snyk test"
          command: |
            ls
            pwd

# Write Custom TF code here

################################
###### Push Notifications ######
################################

  start_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*** Starting Deployment for Techno-core ***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  completed_slack_notification:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*** Deployment for Techno-core Completed ***",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          mentions: '@dow-platform'
          template: basic_fail_1

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          mentions: '@dow-platform'
          template: basic_success_1


#############################
###### Gather metrics #######
#############################
# Write push notifications here 

################################