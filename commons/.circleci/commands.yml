commands:
################################
##### APP DEPLOY COMMANDS ######
################################
  tag_commit:
    parameters:
      app:
        default: ""
        type: string
    steps:
      - run : bash commons/scripts/auto_tag.sh <<parameters.app>>

  poetry_build:
    parameters:
      appName:
        default: ""
        type: string
    steps:
      - run: 
          name: Poetry Build
          command: |
                cd apps/<<parameters.appName>>
                echo Building the code in `pwd` with: `python -V` `pip -V` and `poetry -V`
                poetry build
                poetry run pip install --upgrade -t package dist/*.whl
  create_package:
    parameters:
      appName:
        default: ""
        type: string
    steps:
      - run:
          name: Create Package
          command: |
              cd apps/<<parameters.appName>>/package
              echo Zipping the code in `pwd`
              mkdir -p out
              zip -r out/latest.zip . -x '*.pyc'
  upload_artifacts:
    parameters: 
      from:
        type: string
        description: A local *directory* path to sync with S3
      to:
        type: string
        description: A URI to an S3 bucket, i.e. 's3://the-name-my-bucket'
    steps:
      - aws-s3/sync:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to:   <<parameters.to>>
  create_versioned_assets:
    parameters:
      from:
        type: string
      to:
        type: string
    steps:
      - aws-s3/copy:
          aws-region: AWS_REGION
          from: <<parameters.from>>
          to  : <<parameters.to>>

################################
##### APP Starter COMMANDS #####
################################
  start_lambda:
    parameters:
      target-env:
        type: string
      appName:
        type: string
      directory:
        type: string
    steps:
      - run:
          name: Intiating Lambda
          command: |
            aws lambda update-function-code --function-name techno-core-<<parameters.target-env>>-<<parameters.appName>> --region ${AWS_REGION} --s3-bucket iq-artifacts-cicd-uswest2 --s3-key <<parameters.target-env>>/<<parameters.directory>>/latest.zip

################################
##### APP LINTER & TESTER ######
################################
  linting_and_metrics:
    parameters:
      appName:
        default: ""
        type: string
    steps:
        - run:
            name: Linters
            command: |
                cd apps/<<parameters.appName>>
                poetry run flake8
  py_tests:
    parameters:
      appName:
        default: ""
        type: string
    steps:
        - run:
            name: Pytests
            command: |
                cd apps/<<parameters.appName>>/tests
                poetry run pytest -v
            
################################
###### TERRAFORM TEST ##########
################################

# Write TF Tests here

###############################
###### TERRAFORM DEPLOY #######
###############################

  tf-init:
    parameters:
      appName:
        default: ""
        type: string
      target-env:
        default: ""
        type: string
    steps:
      - run:
          name: terraform init
          command: |
            pwd
            cd infrastructure/<<parameters.appName>>/<<parameters.target-env>>
            terraform init -input=false
            cat ~/.aws/config
            aws configure list

  tf-plan:
    parameters:
      appName:
        default: ""
        type: string
      target-env:
        default: ""
        type: string
    steps:
      - run:
          name: plan
          command: |
            ls
            pwd
            cd infrastructure/<<parameters.appName>>/<<parameters.target-env>>
            pwd
            cat ~/.aws/config
            aws configure list
            echo "here is the config"
            terraform plan -lock=false
  tf-apply:
    parameters:
      appName:
        default: ""
        type: string
      target-env:
        default: ""
        type: string
    steps:
      - run:
          name: apply
          command: |
            cd infrastructure/<<parameters.appName>>/<<parameters.target-env>>
            terraform apply -auto-approve tfapply

################################
###### Push Notifications ######
################################

# Write push notifications here 

#############################
###### Gather metrics #######
#############################
# Write push notifications here 

################################